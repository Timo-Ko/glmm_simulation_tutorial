{
  "hash": "e19c744d34349f7169520d2e0a0689c7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Run the full simulation for the case study example\"\nexecute: \n  eval: true\n---\n\n\n\n\n\n\n::: {.callout-note}\nThis Notebook was used to run the full simulation for the case study discussed in the manuscript. The simulation takes more than 1 hour to run on a Mac Book Pro (13-inch, M1, 2020) with 16 GB memory.\n:::\n\n## Simulation functions\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| echo: true\nsimulate <- function(n_subjects = 100, n_items = 50,\n  b_0 = 0.847, b_e = 1.350, b_a = -1.253, b_c = 2.603,\n  b_ea = 0.790, b_ec = -1.393,\n  sd_u0s = 0.5, sd_u0i = 0.5, ...){\n  require(dplyr)\n  require(faux)\n  # simulate design\n  dat <- add_random(subject = n_subjects, item = n_items) %>%\n    add_between(\"subject\", expert = c(1, 0), .prob = c(0.25, 0.75)) %>%\n    mutate(advice_present = rbinom(n(), 1, prob = 2/3)) %>%\n    mutate(advice_correct = if_else(advice_present == 1L, \n                                    rbinom(n(), 1L, prob = 0.8), 0L)) %>%\n    # add random effects\n    add_ranef(\"subject\", u0s = sd_u0s) %>%\n    add_ranef(\"item\", u0i = sd_u0i) %>%\n    # compute dependent variable\n    mutate(linpred = b_0 + u0i + u0s +\n        b_e * expert + b_a * advice_present + b_c * advice_correct +\n        b_ea * expert * advice_present + b_ec * expert * advice_correct) %>%\n    mutate(y_prob = plogis(linpred)) %>%\n    mutate(y_bin = rbinom(n = n(), size = 1, prob = y_prob))\n  dat\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#| echo: true\nsim_and_analyse <- function(\n  formula_chr = \"y_bin ~ 1 + expert + advice_present + advice_correct + \n    expert:advice_present + expert:advice_correct + (1|subject) + (1|item)\",\n  contrasts = c(\"b8 = b2\", \"b2 = b6\", \"b7 = b1\", \"b1 = b5\"), ...){\n  require(lme4)\n  require(marginaleffects)\n  require(tidyr)\n  # simulate data\n  dat <- simulate(...)\n  # fit model\n  model <- glmer(as.formula(formula_chr), data = dat, family = \"binomial\")\n  # compute contrasts\n  contr_df <- expand_grid(advice_present = 0:1, advice_correct = 0:1,\n    expert = 0:1)\n  predictions(model, newdata = contr_df, type = \"response\", re.form = NA) %>%\n    hypotheses(hypothesis = contrasts, equivalence = c(0, 0)) %>%\n    data.frame()\n}\n```\n:::\n\n\n\n\n\n\n## Run simulation\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| echo: true\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\n#| echo: true\nlibrary(future)\nlibrary(furrr)\n  \nplan(\"multisession\", workers = 6)\nset.seed(2)\n  \nsim_result <- crossing(\n  rep = 1:500,\n  n_subjects = c(100, 150, 200, 250),\n  n_items = c(10, 30, 50, 70)\n) %>%\n  mutate(res = future_pmap(., sim_and_analyse, \n    .options = furrr_options(seed = TRUE))) %>%\n  unnest(col = res)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLoading required package: lme4\nLoading required package: Matrix\n\nAttaching package: ‘Matrix’\n\nThe following objects are masked from ‘package:tidyr’:\n\n    expand, pack, unpack\n\nLoading required package: marginaleffects\nLoading required package: faux\n\n************\nWelcome to faux. For support and examples visit:\nhttps://debruine.github.io/faux/\n- Get and set global package options with: faux_options()\n************\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nLoading required package: lme4\nLoading required package: Matrix\n\nAttaching package: ‘Matrix’\n\nThe following objects are masked from ‘package:tidyr’:\n\n    expand, pack, unpack\n\nLoading required package: marginaleffects\nLoading required package: faux\n\n************\nWelcome to faux. For support and examples visit:\nhttps://debruine.github.io/faux/\n- Get and set global package options with: faux_options()\n************\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nLoading required package: lme4\nLoading required package: Matrix\n\nAttaching package: ‘Matrix’\n\nThe following objects are masked from ‘package:tidyr’:\n\n    expand, pack, unpack\n\nLoading required package: marginaleffects\nLoading required package: faux\n\n************\nWelcome to faux. For support and examples visit:\nhttps://debruine.github.io/faux/\n- Get and set global package options with: faux_options()\n************\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nLoading required package: lme4\nLoading required package: Matrix\n\nAttaching package: ‘Matrix’\n\nThe following objects are masked from ‘package:tidyr’:\n\n    expand, pack, unpack\n\nLoading required package: marginaleffects\nLoading required package: faux\n\n************\nWelcome to faux. For support and examples visit:\nhttps://debruine.github.io/faux/\n- Get and set global package options with: faux_options()\n************\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nLoading required package: lme4\nLoading required package: Matrix\n\nAttaching package: ‘Matrix’\n\nThe following objects are masked from ‘package:tidyr’:\n\n    expand, pack, unpack\n\nLoading required package: marginaleffects\nLoading required package: faux\n\n************\nWelcome to faux. For support and examples visit:\nhttps://debruine.github.io/faux/\n- Get and set global package options with: faux_options()\n************\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nLoading required package: lme4\nLoading required package: Matrix\n\nAttaching package: ‘Matrix’\n\nThe following objects are masked from ‘package:tidyr’:\n\n    expand, pack, unpack\n\nLoading required package: marginaleffects\nLoading required package: faux\n\n************\nWelcome to faux. For support and examples visit:\nhttps://debruine.github.io/faux/\n- Get and set global package options with: faux_options()\n************\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: There were 226 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `res = future_pmap(., sim_and_analyse, .options =\n  furrr_options(seed = TRUE))`.\nCaused by warning in `checkConv()`:\n! Model failed to converge with max|grad| = 0.0158128 (tol = 0.002, component 1)\nℹ Run `dplyr::last_dplyr_warnings()` to see the 225 remaining warnings.\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Save results file to be used in the manuscript\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| echo: true\nsaveRDS(sim_result, file = \"results.rds\")\n```\n:::\n",
    "supporting": [
      "full_simulation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}